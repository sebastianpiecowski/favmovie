package favmovie.gateway.config

import favmovie.gateway.AuthService
import favmovie.gateway.model.HealthCheckResponse
import org.springframework.boot.actuate.health.AbstractHealthIndicator
import org.springframework.boot.actuate.health.Health
import org.springframework.stereotype.Component
import retrofit2.Call
import retrofit2.Response
import java.lang.reflect.UndeclaredThrowableException
import kotlin.reflect.KClass

//
//@Component
//class AuthServiceHealthCheck(private val service: AuthService) : AbstractHealthIndicator() {
//    override fun doHealthCheck(builder: Health.Builder) = service.healthCheck().call(builder, this::class)
//}
//
//private fun Call<HealthCheckResponse>.call(builder: Health.Builder,
//                                           kClass: KClass<out AuthServiceHealthCheck>) {
//    try {
//        execute().validate(builder)
//    } catch (ex: UndeclaredThrowableException) {
//        builder.down().withDetail(kClass.normalizedName(), "Service down")
//    }
//}
//
//private fun Response<HealthCheckResponse>.validate(builder: Health.Builder) {
//    val body = body()
//    val raw = raw()
//    if (isSuccessful && body != null) {
//        builder.up().withDetail(raw.request().url().host(), body).withDetail("time",
//                raw.receivedResponseAtMillis() - raw.sentRequestAtMillis())
//        if (body.status != "UP") {
//            builder.down()
//        }
//    } else {
//        builder.down().withDetail(raw.request().url().host(), errorBody()?.string() ?: "")
//    }
//}
//
//private fun KClass<*>.normalizedName() = this.simpleName!!.removeSuffix("HealthCheck")